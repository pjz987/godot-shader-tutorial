[gd_scene load_steps=9 format=2]

[ext_resource path="res://mesh_instance.gd" type="Script" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode specular_toon;

uniform sampler2D noise;
uniform sampler2D normalmap;

uniform float height_scale = 0.5;

varying vec2 tex_position;

//https://docs.godotengine.org/en/stable/tutorials/shading/your_first_shader/your_first_spatial_shader.html

//float height(vec2 position, float time) {
//	vec2 offset = 0.01 * cos(position + time);
//	return texture(noise, (position / 10.0) - offset).x;
//}

float wave(vec2 position) {
	position += texture(noise, position / 10.0).x * 2.0 - 1.0;
	vec2 wv = 1.0 - abs(sin(position));
	return pow(1.0 - pow(wv.x * wv.y, 0.65), 4.0);
}

float height(vec2 position, float time) {
	float d = wave((position + time) * 0.4) * 0.3;
	d += wave((position - time) * 0.3) * 0.3;
	d += wave((position + time) * 0.5) * 0.2;
	d += wave((position - time) * 0.6) * 0.2;
	return d;
}

//void vertex() {
//	VERTEX.y = cos(VERTEX.x * 4.0) * sin(VERTEX.z * 4.0);
//}

//void vertex() {
//	tex_position = VERTEX.xz / 2.0 + 0.5;
//	float height = texture(noise, tex_position).x;
//	VERTEX.y += height * height_scale;
//}

void vertex() {
	vec2 pos = VERTEX.xz;
	float k = height(pos, TIME);
	VERTEX.y = k;
	NORMAL = normalize(vec3(k - height(pos + vec2(0.1, 0.0), TIME), 0.1, k - height(pos + vec2(0.0, 0.1), TIME)));
}

void fragment() {
	float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
	RIM = 0.2;
	NORMALMAP = texture(normalmap, tex_position).xyz;
	METALLIC = 0.0;
	ROUGHNESS = 0.01 * (1.0 - fresnel);
	ALBEDO = vec3(0.01, 0.03, 0.05) + (0.1 * fresnel);
}"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
noise = SubResource( 2 )

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
as_normalmap = true
noise = SubResource( 4 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 1 )
shader_param/height_scale = 0.5
shader_param/noise = SubResource( 3 )
shader_param/normalmap = SubResource( 5 )

[sub_resource type="PlaneMesh" id=7]
material = SubResource( 6 )
size = Vector2( 16, 16 )
subdivide_width = 256
subdivide_depth = 256

[node name="MeshInstance" type="MeshInstance"]
mesh = SubResource( 7 )
material/0 = null
script = ExtResource( 1 )

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.585635, 2.23789, -1.31795 )
light_color = Color( 0.941176, 0.937255, 0.784314, 1 )
light_energy = 0.64
light_bake_mode = 0
omni_range = 60.0
